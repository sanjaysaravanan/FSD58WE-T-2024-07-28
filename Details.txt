
Topics:

  0.01 Updation:
      fill the form with pre-loaded values
      update the values and submit the form to update a particular product

  0.1 Loading & Error Handling:

      Loading:
        we should display a loading indicator when the API called and still ongoing
      
      Error Handling:
        use try catch & finally in the API call & the component functions
  
  0.2. Axios vs Fetch
      Axios - separate library which helps in handling API requests and other API related operations

        Instance: axios allows to keep multiple instances ( Multiple server instances )
          Take an Example Amazon:

            products.amazon.in - used to retrieve all the products
              more time needed - 20secs
            payments.amazon.in - used to handle the payments
              5 secs, special headers are needed
            carts.amazon.in - used to handle the carts
              2secs, special headers are needed

        It uses XHR for api interaction

        Reduces the JSON.stringfy and JSON.parsing ( response.json() )

        Interceptors: ( middleware for request to internet & response from internet )
          added advantage where we can intercept both request & response

      Fetch - JavaScript inbuilt API/fetch for handling API requests & other API related operations

      Fetch is also capable of doing all the things that axios can do
      But axios do those things in a simpler way

  1. State Management Tool - Redux

    External library for state management using different reducers

    reducer function --> return a modified state based on the different set of actions

    Advantage of Redux over Context-API:
      Avoids re-rendering of unnecessary components

    Install the package with ---> npm install @reduxjs/toolkit
    react-redux
    Chrome-Extension - redux-devtools

    Process:
      1. Store Setup with initial State and reducers
        for manipulation of the store 
          1. Store Setup
          2. Reducers to feeded to the store
          3. Actions to be executed on reducers
          4. Provide to the parent component
      2. Actions ():
          Action for Counter application
            1. inc
            2. dec
            3. reset

      3. Reducers ()
          counter - a reducer inside the store folder

      4. Consume the store values - Subscription
         hook in react-redux called as useSelector
      5. Dispatch --> action
         hook in react-redux called as useDispatch

  useReducer ( Redux like hook which help understanding redux )

  Large Applications uses Redux to Manage the 
    State, Actions, Data as a whole
  
  Example:
    Assume Gmail Application ( Doesn't Mean Gamil use Redux ) 
    uses a lot of components
      1. User ( mailid )
      2. Compose ( Subject, To, CC, BCC )
      3. Drafts ( Mail which is unfinished ) --> Drafts Count Increases
      4. Categories, Junk, Starred, Important, Chats.
    
    Also, Jira Board

    Above entities/features of application uses different types of Desgin, Interactions, States from minor/small frontend actions

    This case managing the state/data only with basic state( state, reducer, context) on inidividual components and passing the data to the required components is very difficult

    May lead to props drilling or more num of callbacks/re-renders

    So, 
    should we use redux everywhere for state managment in large applications

    everywhere redux should we use redux ?
    Ans: Depends on the size of the application & the Team's discussion and decision
  
    redux middleware and persistent ( preloadedState ) in storage

    storage:
      local storage
      session storage

Next session:

  2. Advanced:

    Optimization Techniques to Improve the performance

      memo:

      useCallback:
        to avoid un-necessary re-renders/rendering

      useMemo:
        https://react.dev/reference/react/useMemo
    
      lazy and suspense

  3. CSS Animations

  A simple app creation using Mock APIs
    Student Management Application

      2. simple success/failure alerts


Task:

  Day 27: ( Complete all the Implementation using Axios )
    Day - 27: https://docs.google.com/document/d/1-qvT8VkH2Bvv16hYm-qNiwfusRSt9ACJmceJLpLV9x8/edit
    use mock-api or the api in the task sheet

  Day 28:
    https://docs.google.com/document/d/1XX6bLW3MsJUGbnxl_PKW5POFe55Zxo590V24GNeSChY/edit#heading=h.fyv6vm4v13li

    Use Redux concepts here,
    
    please refer to the redux repo for more ideas

  ** Task Completion Percent is really low, only 35% **

  Please try to complete the Task, 





  

  